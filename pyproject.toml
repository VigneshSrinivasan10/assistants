[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "assistants"
version = "0.1.0"
description = "A low-latency voice assistant that listens for commands and responds"
requires-python = ">=3.10"
authors = [
    { name = "Vignesh Srinivasan", email = "vignesh.mssrinivasan@example.com" }
]
dependencies = [
    "fastapi",
    "fastrtc_whisper_cpp",
    "gradio",
    "hydra-core",
    "numpy==2.2.0",
    "omegaconf",
    "uvicorn",
    "fastrtc>=0.0.26",
    "fastrtc[vad]",
    "fastrtc[stopword]",
    "llama-cpp-python",
    "torch==2.7.1+cpu",
    "soxr",
    "kokoro_onnx",
    "poethepoet>=0.35.0",
    "requests",
    "pytest",
]

[tool.uv.sources]
torch = [
    { index = "pytorch-cpu" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.setuptools]
packages = ["src"]  # Specify only the package(s) you want

[project.scripts]
assistant = "src.main:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.poe.tasks]
install = """
python -c "
import os, subprocess, sys
venv_dir = '.venv'
if not os.path.exists(venv_dir):
    print('ðŸ§ª Creating virtual environment...')
    subprocess.run([sys.executable, '-m', 'venv', venv_dir], check=True)

activate = os.path.join(venv_dir, 'Scripts' if os.name == 'nt' else 'bin', 'activate_this.py')
exec(open(activate).read(), {'__file__': activate})

try:
    import uv
except ImportError:
    print('ðŸ“¦ uv not found. Installing...')
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'uv'], check=True)

print('ðŸ”§ Syncing dependencies...')
subprocess.run([sys.executable, '-m', 'uv', 'sync'], check=True)
"
"""

download-llm = """
mkdir -p models && \
cd models && \
wget -nc https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-GGUF/resolve/main/mistral-7b-instruct-v0.1.Q4_K_M.gguf  && \
cd ..
"""

run = { shell = "bash -c 'source .venv/bin/activate && assistant'" }

start = [
  "install",
  "download-llm",
  "run"
]

smart-run = """
python -c '
import os
if not os.path.exists(".venv") or not os.path.exists("models/mistral-7b-instruct-v0.1.Q4_K_M.gguf"):
    print("ðŸ”§ First-time setup...")
    os.system("poe start")
else:
    print("ðŸš€ Launching assistant...")
    os.system("poe run")
'
"""

#test = "pytest tests/ -v"

test-weather = "python tests/weather.py"

test-all = [
  #"test",
  "test-weather"
]
